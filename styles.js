'use strict';

var gulp = require('gulp');
var gulpif = require('gulp-if');
var rename = require('gulp-rename');
var csso = require('gulp-csso');
var autoprefixer = require('gulp-autoprefixer');
var sass = require('gulp-ruby-sass');
var debug = require('gulp-debug');
var filter = require('gulp-filter');


function handleError(err) {
    console.log(err.toString());
    this.emit('end');
}


module.exports = gulp.task('styles', function () {
    var cssFilter = filter('*.css');
    var sassOpts = {"sourcemap=none": true};
    return gulp.src(release ? config.paths.src.releaseStyles : config.paths.src.appStyles)
        .pipe(gulpif(release, sass(sassOpts).on('error', handleError), sass(sassOpts).on('error', handleError)))
        .pipe(cssFilter)//filter out source maps generated by sass 3.4
        .pipe(autoprefixer(['last 1 version']))
        .pipe(gulpif(release, rename(config.filenames.release.styles), rename(config.filenames.build.styles)))
        .pipe(gulpif(release, gulp.dest(config.paths.dest.release.styles), gulp.dest(config.paths.dest.build.styles)))
        //.pipe(gulpif(release, csso()))
        .pipe(rename({suffix: '.min'}))
        .pipe(cssFilter.restore()) //restore source maps althought they are named incorrectly right now 
        .pipe(gulpif(release, gulp.dest(config.paths.dest.release.styles), gulp.dest(config.paths.dest.build.styles)));
});
